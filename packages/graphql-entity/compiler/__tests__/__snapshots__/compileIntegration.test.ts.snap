// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler basic regression test: file contents 1`] = `
"// @gqle/generated
import { Awaitable, Maybe, Resolvable } from \\"graphql-entity/prelude\\";


/*
 * Definitions
 */

export interface User {
  name: Resolvable<string>;
}

/*
 * Entities
 */

export type UserEntity = User


/*
 * RootExtensions
 */

export interface RootExtensions {
  getUser: Resolvable<User>;
}
"
`;

exports[`compiler basic regression test: file contents 2`] = `
"// @gqle/generated
import { Awaitable, Maybe, Resolvable } from \\"graphql-entity/prelude\\";
import { createEntityServer as baseCreateEntityServer } from \\"graphql-entity\\";
import { User as User } from \\"entity\\";


/*
 * Entities
 */

export interface Entities {
  User: User;
}

/*
 * Root
 */

export interface Root {
  getUser: Resolvable<User>;
}

/*
 * Aliases
 */

export type RootEntity = Root

/*
 * Server
 */

export const createEntityServer = (opts: { root: RootEntity }) =>
  baseCreateEntityServer<RootEntity>(opts);
"
`;

exports[`compiler basic regression test: file path 1`] = `"/entity.ts"`;

exports[`compiler basic regression test: file path 2`] = `"/"`;

exports[`compiler root extensions: file contents 1`] = `
"// @gqle/generated
import { Awaitable, Maybe, Resolvable } from \\"graphql-entity/prelude\\";


/*
 * Definitions
 */

/*
 * Entities
 */

/*
 * RootExtensions
 */

export interface RootExtensions {
  getString: Resolvable<string>;
  setString: Resolvable<string>;
  onString: Resolvable<string>;
}
"
`;

exports[`compiler root extensions: file contents 2`] = `
"// @gqle/generated
import { Awaitable, Maybe, Resolvable } from \\"graphql-entity/prelude\\";
import { createEntityServer as baseCreateEntityServer } from \\"graphql-entity\\";


/*
 * Entities
 */

export interface Entities {
}

/*
 * Root
 */

export interface Root {
  getString: Resolvable<string>;
  setString: Resolvable<string>;
  onString: Resolvable<string>;
}

/*
 * Aliases
 */

export type RootEntity = Root

/*
 * Server
 */

export const createEntityServer = (opts: { root: RootEntity }) =>
  baseCreateEntityServer<RootEntity>(opts);
"
`;

exports[`compiler root extensions: file path 1`] = `"/entity.ts"`;

exports[`compiler root extensions: file path 2`] = `"/"`;
